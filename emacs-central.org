* LMX Base configuration

  The base emacs components will include the following:
  1- Emacs initialization
  2- Package management
  3- Personal information
  4- User Interface settings
  
** LMX Initialization

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; init.el -*- lexical-binding: t; -*-

  (load (concat user-emacs-directory "base/01-bootstrap.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/02-pkgmngr.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/03-personal-info.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/04-lmx-lisp.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/05-modeline-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/06-themes-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/07-ui-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/08-lmx-base-tweaks.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/09-bufmngr-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/10-prjmngr-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/tools/vc-conf") nil 'nomessage)
  (load (concat user-emacs-directory "modules/net/irc-conf") nil 'nomessage)


#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle base/01-bootstrap.el
  ;;; 01-bootstrap.el -*- lexical-binding: t; -*-

  ;; Disable garbagge collection at Emacs bootstrap
  (setq gc-cons-threshold most-positive-fixnum)

  ;; Defer listing of installed local emacs packages till Emacs starts.
  (setq package-enable-at-startup nil)
  (advice-add #'package--ensure-init-file :override #'ignore)

  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)

  ;; Hide Emacs Startup screen

  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq initial-major-mode #'fundamental-mode)
  (setq frame-inhibit-implied-resize t)

#+END_SRC

** LMX Package Management

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/02-pkgmngr.el
    ;;; 02-pkgmngr.el -*- lexical-binding: t; -*-

    ;; Initialize Straight

    (setq straight-base-dir (concat user-emacs-directory ".local")
	  straight-repository-branch "develop"
	  straight-cache-autoloads nil
	  straight-check-for-modifications nil
	  straight-enable-package-integration nil
	  straight-vc-git-default-clone-depth 1
	  autoload-compute-prefixes nil
	  straight-use-package-by-default t)


    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name ".local/straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    ;; Install use-package

    (straight-use-package 'use-package)

    ;; Install Paradox for browsing packages
    (use-package paradox
      :defer t
      :straight t
      :config
      (setq paradox-github-token (concat user-emacs-directory "paradox-token"))
      (paradox-enable))

    ;; Install diminish and delight for use with use-package when needed.
    (use-package diminish
      :straight t
      :defer t)

    (use-package delight
      :straight t
      :defer t)

    ;; Configure Package

    (use-package package
      :defer t
      :config
      (setq package-enable-at-startup nil)
      (setq package-user-dir (concat user-emacs-directory ".local/elpa")
	    package-gnupghome-dir (expand-file-name "gpg" package-user-dir))
      (add-to-list 'package-archives
		   '("gnu" . "https://elpa.gnu.org/packages/") t)
      (add-to-list 'package-archives
		   '("melpa" . "http://melpa.org/packages/") t)
      (add-to-list 'package-archives
		   '("org" . "http://orgmode.org/elpa/") t))
#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/03-personal-info.el
;;; 03-personal-info.el -*- lexical-binding: t; -*-

(setq user-full-name "Hassan Abdin"
      user-mail-address "habdin@gmail.com")

#+END_SRC

** LMX lisp functions

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/04-lmx-lisp.el
  ;;; 04-lmx-lisp.el -*- lexical-binding: t; -*-

  (use-package dash-functional
    :straight t)

  (defun fix-doom-modeline (frame)
    "Fix doom modeline to make it show modeline icons when Emacs is started as daemon.
  FRAME is the name of the frame."
    (with-selected-frame frame
      (when (display-graphic-p)
	(setq doom-modeline-icon t))))

  (defun lmx-load-theme (theme)
    "Load downloaded theme."
    (interactive
     (list
      (intern (completing-read "Load custom theme: "
			       (mapcar #'symbol-name
				       (custom-available-themes))))))
    (load-theme theme t))

  ;; The next functions configure fira-code font workaround for proper
  ;; Emacs integration.

  (defun my-correct-symbol-bounds (pretty-alist)
    "Prepend a TAB character to each symbol in this alist,
		this way compose-region called by prettify-symbols-mode
		will use the correct width of the symbols
		instead of the width measured by char-width."
    (mapcar (lambda (el)
	      (setcdr el (string ?\t (cdr el)))
	      el)
	    pretty-alist))

  (defun my-ligature-list (ligatures codepoint-start)
    "Create an alist of strings to replace with
		codepoints starting from codepoint-start."
    (let ((codepoints (-iterate '1+ codepoint-start (length ligatures))))
      (-zip-pair ligatures codepoints)))

  (setq my-fira-code-ligatures
	(let* ((ligs '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
		       "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
		       "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
		       "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
		       ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
		       "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
		       "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
		       "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
		       ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
		       "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
		       "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
		       "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
		       "x" ":" "+" "+" "*")))
	  (my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))

  (defun my-set-fira-code-ligatures ()
    (setq prettify-symbols-alist
	  (append my-fira-code-ligatures prettify-symbols-alist))
    (prettify-symbols-mode))
#+END_SRC

** LMX Buffer settings
*** Modeline settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/05-modeline-conf.el
  ;;; 05-modeline-conf.el -*- lexical-binding: t; -*-

  (use-package doom-modeline
	       :straight t
	       :init (doom-modeline-mode 1)
	       (setq doom-modeline-height 16)
	       (column-number-mode t)
	       :config
	       (if (daemonp)
		   (add-hook 'after-make-frame-functions #'fix-doom-modeline)
		 (doom-modeline-mode 1)))

#+END_SRC

*** Themes

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/06-themes-conf.el
  ;;;  06-themes-conf.el -*- lexical-binding: t; -*-

  (use-package doom-themes
    :straight t)

  (use-package all-the-icons
    :straight t
    :defer t)

  (use-package all-the-icons-dired
    :straight t
    :after all-the-icons
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

#+END_SRC

*** UI settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/07-ui-conf.el
  ;;; 07-ui-conf.el -*- lexical-binding: t; -*-

  ;;; Appearance tweaks

  ;; Frame title format
  (setq frame-title-format
	'("" invocation-name " - "
	  (:eval (if (buffer-file-name)
		     (abbreviate-file-name (buffer-file-name))
		   "%b"))))

  ;; Font setting
  (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
  (add-to-list 'default-frame-alist
	       '(font . "Fira Code-11"))
  (add-hook 'after-init-hook 'my-set-fira-code-ligatures)

  ;; Theme settings
  (lmx-load-theme 'doom-acario-dark)

  ;; Hightlight current line
  (global-hl-line-mode)

  ;; Always indicate empty lines within files and buffers
  (setq default-indicate-empty-lines t)
  (set-fringe-mode 4)
#+END_SRC

*** Enhanced base functionality

#+BEGIN_SRC emacs-lisp :mkdirp :tangle base/08-lmx-base-tweaks.el
  ;;; 08-lmx-base-tweaks.el -*- lexical-binding: t; -*-

  ;; Define default Emacs environment settings
  (set-language-environment "utf-8")
  (set-default-coding-systems 'utf-8)

  ;; Change Default yes-or-no-p to a shorter prompt
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Always reveal the pairing symbol (brackets mainly +/- others)
  (show-paren-mode t)

  ;; Enable entering brackets, quotes, double-quotes and other symbols in pairs
  (electric-pair-mode t)

  ;; Make the Editor aware of disk changes for any file opened within Emacs
  (global-auto-revert-mode 1)

  (use-package whitespace
    :diminish whitespace-mode
    :config
    (setq whitespace-line-column 10000))

  ;; Use `volatile-highlights' to highlight changes from pasting, ...etc.
  (use-package volatile-highlights
    :straight t
    :diminish volatile-highlights-mode
    :defer t
    :config
    (volatile-highlights-mode t))

  ;; rainbow-mode - colourise colours in the buffer
  (use-package rainbow-mode
    :straight t
    :defer t
    )

  ;; rainbow-delimiters - show matching brackets etc
  (use-package rainbow-delimiters
    :straight t
    :defer t
    :config
    (setq global-rainbow-delimiters-mode 1))

  ;; show page breaks
  (use-package page-break-lines
    :straight t
    :diminish page-break-lines-mode
    :defer t
    :config
    (global-page-break-lines-mode 1)
    (setq page-break-lines-modes '(emacs-lisp-mode lisp-mode scheme-mode compilation-mode outline-mode help-mode org-mode ess-mode latex-mode)))

  ;;; Makes Emacs Dashboard the Initial startup screen
  (use-package dashboard
    :straight t
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-set-heading-icons 1)
    (setq dashboard-set-file-icons 1)
    (setq dashboard-items '((projects . 5)
			    (recents . 5)
			    (bookmarks . 5)
			    (agenda .5)))
    (setq dashboard-set-navigator 1)
    (setq dashboard-navigator-buttons `(;; line1
	  ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
	   "Homepage"
	   "Browse homepage"
	   (lambda (&rest _) (browse-url "homepage")))
	  ("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
	  ("?" "" "?/h" #'show-help nil "<" ">"))
	   ;; line 2
	  ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
	    "Linkedin"
	    ""
	    (lambda (&rest _) (browse-url "homepage")))
	   ("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error)))))
#+END_SRC

*** Buffer Manager settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/09-bufmngr-conf.el
  ;;; 09-bufmngr-conf.el -*- lexical-binding: t; -*-

  (use-package ace-window
    :straight t
    :bind
    ("M-o" . ace-window))
#+END_SRC

** Project Manager settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/10-prjmngr-conf.el 
  ;;; 10-prjmngr-conf.el -*- lexical-binding: t; -*-

  (use-package projectile
    :straight t
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-project-search-path '("~/Projects/"))
    (setq projectile-completion-system 'ivy)
    (setq projectile-mode-line-prefix " Project ")
    (projectile-mode +1))
#+END_SRC

* LMX Modules configuration
** Version control

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/tools/vc-conf.el
  ;; vc-conf.el -*- lexical-binding: t; -*-

  (use-package magit
    :straight t)

  (use-package magit-gh-pulls
    :straight t
    :defer t
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))

  (use-package magit-gitflow
    :straight t)

  (use-package magit-imerge
    :straight t)

  (use-package magithub
    :straight t)

  (use-package diff-hl
    :straight t
    :defer t
    :config
    (global-diff-hl-mode))

#+END_SRC

** IRC settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/net/irc-conf.el
  ;;; irc-conf.el -*- lexical-binding: t; -*-

  (use-package erc
    :defer t
    :config
    ;; Set user information
    (setq erc-nick "Lordveda")
    (setq erc-user-full-name "Hassan Abdin")
    ;; Load user password file
    (load (concat user-emacs-directory "modules/net/erc-auth.el")))

  ;; Add `erc-colorize' extension
  (use-package erc-colorize
    :straight t
    :defer t
    :config
    (erc-colorize-mode 1))
#+END_SRC

** File Manager settings

