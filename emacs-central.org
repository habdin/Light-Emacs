* Light Emacs Base configuration

  The base emacs components will include the following:
  1- Emacs initialization
  2- Package management
  3- Personal information
  4- User Interface settings
  
** Emacs Initialization

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; init.el -*- lexical-binding: t; -*-

  (load (concat user-emacs-directory "base/01-bootstrap.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/02-pkgmngr.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/03-personal-info.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/04-lmx-lisp.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/05-modeline-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/06-themes-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/07-ui-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/tools/vc-conf") nil 'nomessage)
  (load (concat user-emacs-directory "modules/net/irc-conf") nil 'nomessage)


#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle base/01-bootstrap.el
  ;;; 01-bootstrap.el -*- lexical-binding: t; -*-

  ;; Disable garbagge collection at Emacs bootstrap
  (setq gc-cons-threshold most-positive-fixnum)

  ;; Defer listing of installed local emacs packages till Emacs starts.
  (setq package-enable-at-startup nil)
  (advice-add #'package--ensure-init-file :override #'ignore)

  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)

  ;; Hide Emacs Startup screen

  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq initial-major-mode #'fundamental-mode)


#+END_SRC

** Package Management

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/02-pkgmngr.el
  ;;; 02-pkgmngr.el -*- lexical-binding: t; -*-

  ;; Initialize Straight

  (setq straight-base-dir (concat user-emacs-directory ".local")
	straight-repository-branch "develop"
	straight-cache-autoloads nil
	straight-check-for-modifications nil
	straight-enable-package-integration nil
	straight-vc-git-default-clone-depth 1
	autoload-compute-prefixes nil
	straight-use-package-by-default t)


  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name ".local/straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Install use-package

  (straight-use-package 'use-package)

  ;; Install Paradox for browsing packages
  (use-package paradox
    :defer t
    :straight t
    :config
    (setq paradox-github-token (concat user-emacs-directory "paradox-token"))
    (paradox-enable))

  ;; Install diminish and delight for use with use-package when needed.
  (use-package diminish
    :straight t
    :defer t)

  (use-package delight
    :straight t
    :defer t)

  ;; Configure Package

  (use-package package
    :defer t
    :config
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives
		 '("gnu" . "https://elpa.gnu.org/packages/") t)
    (add-to-list 'package-archives
		 '("melpa" . "http://melpa.org/packages/") t)
    (add-to-list 'package-archives
		 '("org" . "http://orgmode.org/elpa/") t))
#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/03-personal-info.el
;;; 03-personal-info.el -*- lexical-binding: t; -*-

(setq user-full-name "Hassan Abdin"
      user-mail-address "habdin@gmail.com")

#+END_SRC

** Lignt Emacs lisp functions

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/04-lmx-lisp.el
  ;;; 04-lmx-lisp.el -*- lexical-binding: t; -*-

  (use-package dash-functional
    :straight t)

  (defun fix-doom-modeline (frame)
    "Fix doom modeline to make it show modeline icons when Emacs is started as daemon.
  FRAME is the name of the frame."
    (with-selected-frame frame
      (when (display-graphic-p)
	(setq doom-modeline-icon t))))

  (defun lmx-load-theme (theme)
    "Load downloaded theme."
    (interactive
     (list
      (intern (completing-read "Load custom theme: "
			       (mapcar #'symbol-name
				       (custom-available-themes))))))
    (load-theme theme t))

  ;; The next functions configure fira-code font workaround for proper
  ;; Emacs integration.

  (defun my-correct-symbol-bounds (pretty-alist)
    "Prepend a TAB character to each symbol in this alist,
		this way compose-region called by prettify-symbols-mode
		will use the correct width of the symbols
		instead of the width measured by char-width."
    (mapcar (lambda (el)
	      (setcdr el (string ?\t (cdr el)))
	      el)
	    pretty-alist))

  (defun my-ligature-list (ligatures codepoint-start)
    "Create an alist of strings to replace with
		codepoints starting from codepoint-start."
    (let ((codepoints (-iterate '1+ codepoint-start (length ligatures))))
      (-zip-pair ligatures codepoints)))

  (setq my-fira-code-ligatures
	(let* ((ligs '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
		       "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
		       "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
		       "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
		       ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
		       "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
		       "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
		       "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
		       ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
		       "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
		       "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
		       "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
		       "x" ":" "+" "+" "*")))
	  (my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))

  (defun my-set-fira-code-ligatures ()
    (setq prettify-symbols-alist
	  (append my-fira-code-ligatures prettify-symbols-alist))
    (prettify-symbols-mode))
#+END_SRC

** User Interface settings
*** Modeline settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/05-modeline-conf.el
  ;;; 05-modeline-conf.el -*- lexical-binding: t; -*-

  (use-package doom-modeline
	       :straight t
	       :init (doom-modeline-mode 1)
	       (setq doom-modeline-height 16)
	       (column-number-mode t)
	       :config
	       (if (daemonp)
		   (add-hook 'after-make-frame-functions #'fix-doom-modeline)
		 (doom-modeline-mode 1)))

#+END_SRC

*** Themes

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/06-themes-conf.el
  ;;;  06-themes-conf.el -*- lexical-binding: t; -*-

  (use-package doom-themes
    :straight t)

#+END_SRC

*** Buffer settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/07-ui-conf.el
  ;;; 07-ui-conf.el -*- lexical-binding: t; -*-

  ;;; Appearance tweaks

  ;; Frame title format
  (setq frame-title-format
	'("" invocation-name " - "
	  (:eval (if (buffer-file-name)
		     (abbreviate-file-name (buffer-file-name))
		   "%b"))))

  ;; Font setting
  (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
  (add-to-list 'default-frame-alist
	       '(font . "Fira Code-11"))
  (add-hook 'after-init-hook 'my-set-fira-code-ligatures)

  ;; Theme settings
  (lmx-load-theme 'doom-acario-dark)

  ;; Hightlight current line
  (global-hl-line-mode)

  ;; Always indicate empty lines within files and buffers
  (setq default-indicate-empty-lines t)


  ;;; Base Functionality tweaks

  ;; Define default Emacs environment settings
  (set-language-environment "utf-8")
  (set-default-coding-systems 'utf-8)

  ;; Change Default yes-or-no-p to a shorter prompt
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Light Emacs Modules configuration
** Version control

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/tools/vc-conf.el
  ;; vc-conf.el -*- lexical-binding: t; -*-

  (use-package magit
    :straight t)

  (use-package magit-gh-pulls
    :straight t
    :defer t
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))

  (use-package magit-gitflow
    :straight t)

  (use-package magit-imerge
    :straight t)

  (use-package magithub
    :straight t)

#+END_SRC

** Auto-completion support

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/net/irc-conf.el
  ;;; irc-conf.el -*- lexical-binding: t; -*-

  (use-package erc
    :defer t
    :config
    ;; Set user information
    (setq erc-nick "Lordveda")
    (setq erc-user-full-name "Hassan Abdin")
    ;; Load user password file
    (load (concat user-emacs-directory "modules/net/erc-auth.el")))

  ;; Add `erc-colorize' extension
  (use-package erc-colorize
    :straight t
    :defer t
    :config
    (erc-colorize-mode 1))
#+END_SRC
